Design Patterns

Singleton pattern :

we can ins

Adapter pattern


polymorphism will avoid complex conditional benhavior


Applicable solid principles:

single responsbility principle and integration segregation principle

Single Responsibility principle
A class should have one and only one reason to change, meaning that a class should have only one job.

Open/Closed principle
Software entities â€¦ should be open for extension, but closed for modification
Objects or entities should be open for extension, but closed for modification.

Liskov Substitution principle
Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T

Interface Segregation principle
A client should never be forced to implement an interface that it doesn't use or clients shouldn't be forced to depend on methods they do not use.

Dependency Inversion principle.
Entities must depend on abstractions not on concretions. It states that the high level module must not depend on the low level module, but they should depend on abstractions.


C# does not support multiple inheritance 
Adpater pattern 2 types 
object and class type 
we do not use class type because it requires multiple inheritance

https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design

